package awslambda.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

@DynamoDBTable(tableName = "LamdbaExecutionTimes")
public class LambdaExecutionTime {

    public String id;
    public String functionLanguage;
    public String memorySize;
    public String architecture;
    public float executionTime;
    public float invokeTime;
    public float totalTime;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    public String getId() {
        return id;
    }

    public LambdaExecutionTime setId(String id) {
        this.id = id;
        return this;
    }

    public String getFunctionLanguage() {
        return functionLanguage;
    }

    public LambdaExecutionTime setFunctionLanguage(String functionLanguage) {
        this.functionLanguage = functionLanguage;
        return this;
    }

    public String getMemorySize() {
        return memorySize;
    }

    public LambdaExecutionTime setMemorySize(String memorySize) {
        this.memorySize = memorySize;
        return this;
    }

    public String getArchitecture() {
        return architecture;
    }

    public LambdaExecutionTime setArchitecture(String architecture) {
        this.architecture = architecture;
        return this;
    }

    public float getExecutionTime() {
        return executionTime;
    }

    public LambdaExecutionTime setExecutionTime(float executionTime) {
        this.executionTime = executionTime;
        return this;
    }

    public float getInvokeTime() {
        return invokeTime;
    }

    public LambdaExecutionTime setInvokeTime(float invokeTime) {
        this.invokeTime = invokeTime;
        return this;
    }

    public float getTotalTime() {
        return totalTime;
    }

    public LambdaExecutionTime setTotalTime(float totalTime) {
        this.totalTime = totalTime;
        return this;
    }

    public LambdaExecutionTime() {
    }
}
